# -*- coding: utf-8 -*-
"""(Roger)Copy of IOE574_FP_base.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dH8Lg_NJaV30vvlLPHR6avAS_-gpEgUD

## Library
"""

import numpy as np
import matplotlib.pyplot as plt
import math
from tqdm import tqdm
import scipy.stats as stats
import seaborn as sns
import inspect

"""## Defintion of Classes



"""

class Queue:
    '''
    Queue:
        - function
          *size(): return type: int, size of the queue right now.
          *empty(): return type: boolen, true if queue is empty, otherwise false
          *full(): return type: boolen, true if queue is full, otherwise false
          *push(): input: any type, return -1 if queue is full.
          *pop(): return front item in queue if not empty. Otherwise, -1. And remove item from the queue.
          *top(): return fron item if queue is not empty. Otherwise, -1.
    '''
    def __init__(self, q_size = None):
        self.queue = []
        self.q_size = q_size
    
    def size(self):
        return len(self.queue)

    def empty(self):
        return self.size() == 0

    def full(self):
        return self.size() == self.q_size    

    def push(self, item):
        if self.full():
            return -1
        self.queue.append(item)
    
    def pop(self):
        if self.empty():
            return -1
        item = self.queue[0]
        self.queue = self.queue[1:]
        return item
    
    def top(self):
        if self.empty():
            return -1
        item = self.queue[0]
        return item      

    def __str__(self):
        return str(self.queue)

class Patient:
    
    def __init__(self):
        self.index = -1
        self.patient_type = -1
        self.preference = -1
        self.check = -1
        self.test_preference = -1
        
        self.A_HealthDeclare = -1
        self.S_HealthDeclare = -1
        self.D_HealthDeclare = -1
        self.A_Register = -1
        self.S_Register = -1
        self.D_Register = float('inf')
        self.A_Diagnosis = -1
        self.S_Diagnosis = -1
        self.D_Diagnosis = float('inf')
        self.A_Pay = -1
        self.S_Pay = -1
        self.D_Pay = float('inf')
        self.A_Test = -1
        self.S_Test = -1
        self.D_Test = float('inf')

"""#Patient information"""

class Patient_arrival:
    
    def __init__(self, 
                 group_ratio = [0.15,0.6,0.25],    
                 check_ratio = [0.7,0.7,0.3],       
                 preference = [0.7,0.7,0.3],
                 test_preference = [0.5,0.5,0.5],
                 arrival_rate = 1/0.20,
                 c = 1):
        
        self.max_l = 0.4    # Assumed, we will change it later

        self.patient_group_ratio = group_ratio
        self.acc_patient_group_ratio = [sum(self.patient_group_ratio[:i+1]) for i in range(len(self.patient_group_ratio))]
        self.patient_check_ratio = check_ratio
        self.patient_preference = preference
        self.test_preference = test_preference
        self.c = c     # control coefficient for sensitivity analysis
        self.arrival_rate = arrival_rate
        
    def generate_new_patient(self):
        u_type = np.random.rand()
        u_check = np.random.rand()
        u_preference = np.random.rand()
        u_test_preference = np.random.rand()
        
        new_patient = Patient()
        index = 0
        while u_type > self.acc_patient_group_ratio[index]:
            index += 1
        new_patient.patient_type = index    
        
        new_patient.check = 0
        if u_check < self.patient_check_ratio[new_patient.patient_type]:
            new_patient.check = 1
        
        new_patient.preference = 0
        if u_preference < self.patient_preference[new_patient.patient_type]:
            new_patient.preference = 1

        new_patient.test_preference = 0
        if u_test_preference < self.test_preference[new_patient.patient_type]:
            new_patient.test_preference = 1

        return new_patient
    
    def generate_arrival_time(self):
        time = np.random.exponential(self.arrival_rate)
        return time
    
    def rate(self, t):
        return 0.2*(math.sin((1/160)*math.pi*t)+1)*(self.c)

    def generate_nonhomo_time(self, t):
        while True:
            u1 = np.random.rand()
            t = t - np.log(u1)/self.max_l

            u2 = np.random.rand()
            if u2 <= self.rate(t) / self.max_l:
                return t

class Machine:
    def __init__(self,
                 group_register_rate = [1/1.8,1/2,1/1.5],      # changed
                 group_pay_rate = [1/0.200,1/0.232,1/0.135],   # changed
                 c = 1):
        
        self.c = c     # control coefficient for sensitivity analysis
        self.group_register_rate = [x / self.c for x in group_register_rate]
        self.group_pay_rate = [x / self.c for x in group_pay_rate]
  
    def generate_register_time(self, group_type):
        time = np.random.exponential(self.group_register_rate[group_type])
        return time

    def generate_pay_time(self, group_type):
        pay_time = np.random.exponential(self.group_pay_rate[group_type])
        return pay_time    

class Counter:
    def __init__(self, 
                 group_register_rate = [1/1.35,1/1.5,1/1.2],    # changed
                 group_pay_rate = [1/0.121,1/0.1277,1/0.1277],
                 c = 1):
  
        self.c = c     # control coefficient for sensitivity analysis
        self.group_register_rate = [x / self.c for x in group_register_rate]
        self.group_pay_rate = [x / self.c for x in group_pay_rate]
        
    
    def generate_register_time(self, group_type):
        time = np.random.exponential(self.group_register_rate[group_type])
        return time

    def generate_pay_time(self, group_type):
        pay_time = np.random.exponential(self.group_pay_rate[group_type])
        return pay_time

class Doctor:
      
    def __init__(self, check_rate = 1/0.317, c = 1):
        self.c = c     # control coefficient for sensitivity analysis
        self.check_rate = check_rate/self.c

    def generate_diagnosis_time(self):
        diag_time = np.random.exponential(self.check_rate)
        return diag_time

class Tester:
    
    def __init__(self, test_rate = 1/2.5):
        self.test_rate = test_rate
    def generate_test_time(self):
        test_time = np.random.exponential(self.test_rate)
        return test_time

class Health_checker:
    
    def __init__(self, check_rate= 1/100, fill_time = 1/3.3):
        self.check_rate = check_rate
        self.fill_time = fill_time
    
    def generate_check_time(self):
        time = np.random.exponential(self.check_rate)
        return time

    def generate_fill_time(self):
        time = np.random.exponential(self.fill_time)
        return time

class Test_system_base:
    
    def __init__(self,
                 patient_arrival,
                 health_check,
                 health_fill,
                 machine_register,
                 machine_pay,
                 counter_register,
                 counter_pay,
                 diagnosis,
                 test_throat,
                 test_nasal,
                 health_check_index,
                 health_fill_index,
                 machine_register_index,
                 machine_pay_index,
                 counter_register_index,
                 counter_pay_index,
                 diagnosis_index,
                 test_throat_index,
                 test_nasal_index,
                 T = 4*60,                 
                 ):
        
        self.T = T
        self.t = 0
        self.case = -1

        self.health_check = health_check
        self.health_fill = health_fill 
        
        self.patient_list = patient_arrival
        
        self.patient_queue = Queue()

        self.health_declare_queue = Queue()
        
        self.machine_register = machine_register
        self.counter_register = counter_register
        self.machine_pay = machine_pay
        self.counter_pay = counter_pay

        self.counter_queue_1 = Queue()
        self.counter_queue_2 = Queue()
        self.machine_queue_1 = Queue()
        self.machine_queue_2 = Queue()

        #self.server_set = [self.counter_1 , self.counter_2 , self.machine_1 , self.machine_2]
        self.server_queue_set = [self.counter_queue_1 , self.counter_queue_2 , self.machine_queue_1 , self.machine_queue_2]
        
        self.diagnosis_system = diagnosis
        self.diagnosis_queue = Queue()
           
        self.tester_system_throat = test_throat
        self.tester_system_nasal = test_nasal

        self.test_queue_throat = Queue()
        self.test_queue_nasal = Queue()
        
        self.update = [[self.t, 
                       self.health_declare_queue.size(), 
                       self.counter_queue_1.size(),
                       self.counter_queue_2.size(),
                       self.machine_queue_1.size(),
                       self.machine_queue_2.size(),
                       self.diagnosis_queue.size(),
                       self.test_queue_throat.size(),
                       self.test_queue_nasal.size()]]
        
        self.health_declare_t = float('inf')
        self.server_set_t = [float('inf') for i in range(4)]

        self.diagnosis_queue_t = float('inf')                 
        self.test_queue_throat_t = float('inf')
        self.test_queue_nasal_t = float('inf')     
        
        self.health_check_index = health_check_index
        self.health_fill_index = health_fill_index
        self.machine_pay_index = machine_pay_index
        self.counter_pay_index = counter_pay_index
        self.diagnosis_index = diagnosis_index
        self.machine_register_index = machine_register_index
        self.counter_register_index = counter_register_index
        self.test_throat_index = test_throat_index
        self.test_nasal_index = test_nasal_index
        
    def simulate(self):
        
        total_patient = len(self.patient_list)
        for i in range(total_patient):
            self.patient_queue.push(self.patient_list[i])
           
        
        while True:

            
            event_t = [self.patient_queue.top().A_HealthDeclare if self.patient_queue.top() != -1 else float('inf'),
                       self.health_declare_queue.top().D_HealthDeclare if self.health_declare_queue.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Register if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Register if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Register if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Register if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.diagnosis_queue.top().D_Diagnosis if self.diagnosis_queue.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Pay if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Pay if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Pay if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Pay if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Register != float('inf') else float('inf'),                      
                       self.test_queue_throat.top().D_Test if self.test_queue_throat.top() != -1 else float('inf'),
                       self.test_queue_nasal.top().D_Test if self.test_queue_nasal.top() !=  -1 else float('inf')
                  ]
            

            #print(event_t[-2:])
            case_min_time = min(event_t)
            self.t = case_min_time
            
            if case_min_time == float('inf'):
                break
            self.case = event_t.index(case_min_time)
            
            if self.case <= 0:    
                self.health_declaration(event_t)    
            elif self.case <= 1:    
                self.register(event_t)
            elif self.case <= 5:
                self.diagnosis(event_t)
            elif self.case <= 6:
                self.pay(event_t)
            elif self.case <= 10:
                self.test(event_t)        
            else:
                self.leave()

            self.update.append([self.t, 
                                self.health_declare_queue.size(), 
                                self.counter_queue_1.size(),
                                self.counter_queue_2.size(),
                                self.machine_queue_1.size(),
                                self.machine_queue_2.size(),
                                self.diagnosis_queue.size(),
                                self.test_queue_throat.size(),
                                self.test_queue_nasal.size()])            

    def health_declaration(self, event_t):

        patient = self.patient_queue.pop()
        
        declare_time = self.health_check[self.health_check_index]
        self.health_check_index += 1
        #self.health_check.pop(0)

        if patient.check == 0:
          declare_time += self.health_fill[self.health_fill_index]
          self.health_fill_index =+ 1
          #self.health_fill.pop(0)
        
        patient.S_HealthDeclare = declare_time  
        
        temp_time = patient.A_HealthDeclare + declare_time
        next_health_depature_time = event_t[1] if not self.health_declare_queue.empty() else self.health_declare_t
        

        if next_health_depature_time < patient.A_HealthDeclare or self.health_declare_t == float('inf'):
            self.health_declare_t = temp_time
        else: #next_health_depature_time >= patient.A_HealthDeclare:
            self.health_declare_t += declare_time           
        
        patient.D_HealthDeclare = patient.A_Register = self.health_declare_t
        self.health_declare_queue.push(patient)
        #print(self.health_declare_t,temp_time,patient.A_HealthDeclare,next_health_depature_time)
        
    
    def register(self,event_t):  

        patient = self.health_declare_queue.pop()
        
        
        patient_type = patient.patient_type
        if patient.preference == 1:
            line_length = [self.server_queue_set[i].size() for i in range(2,4)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            register_time = self.machine_register[patient_type][self.machine_register_index[patient_type]]
            self.machine_register_index[patient_type] += 1      
        else:        
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            register_time = self.counter_register[patient_type][self.counter_register_index[patient_type]]
            self.counter_register_index[patient_type] += 1 
        
        patient.S_Register = register_time

        temp_time = patient.A_Register + register_time
        next_counter_depature_time = self.server_set_t[shortest_line_index]
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Register:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += register_time     
        
        patient.D_Register = patient.A_Diagnosis = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)
        

    def diagnosis(self, event_t):
        patient = self.server_queue_set[self.case - 2].pop()
        diagnosis_time = self.diagnosis_system[self.diagnosis_index]
        self.diagnosis_index += 1
        patient.S_Diagnosis = diagnosis_time

        temp_time = patient.A_Diagnosis + diagnosis_time
        next_diagnosis_depature_time = self.diagnosis_queue_t #event_t[6] start here

        if next_diagnosis_depature_time < patient.A_Diagnosis or self.diagnosis_queue_t == float('inf'):
            self.diagnosis_queue_t = temp_time
        else:
            self.diagnosis_queue_t += diagnosis_time

        patient.D_Diagnosis = patient.A_Pay = self.diagnosis_queue_t
        self.diagnosis_queue.push(patient)           

    def pay(self, event_t):
        patient = self.diagnosis_queue.pop()
        
        
        if patient.preference == 1:
            line_length = [self.server_queue_set[i].size() for i in range(2,4)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            pay_time = self.machine_pay[patient.patient_type][self.machine_pay_index[patient.patient_type]]
            self.machine_pay_index[patient.patient_type] += 1      
        else:        
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            pay_time = self.counter_pay[patient.patient_type][self.counter_pay_index[patient.patient_type]]
            self.counter_pay_index[patient.patient_type] += 1 
        
        patient.S_Pay = pay_time

        temp_time = patient.A_Pay + pay_time
        next_counter_depature_time = self.server_set_t[shortest_line_index] #event_t[shortest_line_index + 7]
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Pay:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += pay_time     
        
        patient.D_Pay = patient.A_Test = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)            
        
    def test(self, event_t):
                
        patient = self.server_queue_set[self.case - 7].pop()
        if patient.test_preference == 0:
            test_time = self.tester_system_throat[self.test_throat_index]
            self.test_throat_index += 1
        else:
            test_time = self.tester_system_nasal[self.test_nasal_index]
            self.test_nasal_index += 1
 
        patient.S_Test = test_time

        temp_time = patient.A_Test + test_time
        next_test_depature_time = self.test_queue_throat_t if patient.test_preference == 0 else self.test_queue_nasal_t #event_t[self.case]
        
        if patient.test_preference == 0:
            if self.test_queue_throat_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_throat_t = temp_time
            else:
                self.test_queue_throat_t += test_time    
        
            patient.D_Test = self.test_queue_throat_t
        else:
            if self.test_queue_nasal_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_nasal_t = temp_time
            else:
                self.test_queue_nasal_t += test_time    
        
            patient.D_Test = self.test_queue_nasal_t

        if patient.test_preference == 0:  
            self.test_queue_throat.push(patient)
        else:
            self.test_queue_nasal.push(patient)     

    def leave(self):
        if self.case == 11:
            patient = self.test_queue_throat.pop()
        else:
            patient = self.test_queue_nasal.pop()    
        self.patient_list[patient.index - 1] = patient


class Test_system_alt1:
    
    def __init__(self,
                 patient_arrival,
                 health_check,
                 health_fill,
                 machine_register,
                 machine_pay,
                 counter_register,
                 counter_pay,
                 diagnosis,
                 test_throat,
                 test_nasal,
                 health_check_index,
                 health_fill_index,
                 machine_register_index,
                 machine_pay_index,
                 counter_register_index,
                 counter_pay_index,
                 diagnosis_index,
                 test_throat_index,
                 test_nasal_index,                 
                 T = 4*60,                 
                 ):
        
        self.T = T
        self.t = 0
        self.case = -1

        self.health_check = health_check
        self.health_fill = health_fill
        
        self.patient_list = patient_arrival
        
        self.patient_queue = Queue()

        self.health_declare_queue = Queue()

        
        
        self.machine_register = machine_register
        self.counter_register = counter_register
        self.machine_pay = machine_pay
        self.counter_pay = counter_pay


        self.counter_queue_1 = Queue()
        self.counter_queue_2 = Queue()
        self.machine_queue_1 = Queue()
        self.machine_queue_2 = Queue()
        self.machine_queue_3 = Queue()
        self.machine_queue_4 = Queue()

        #self.server_set = [self.counter_1 , self.counter_2 , self.machine_1 , self.machine_2, self.machine_3 , self.machine_4]
        self.server_queue_set = [self.counter_queue_1 , 
                                 self.counter_queue_2 , 
                                 self.machine_queue_1 , 
                                 self.machine_queue_2, 
                                 self.machine_queue_3 , 
                                 self.machine_queue_4]
        
        self.diagnosis_system = diagnosis
        self.diagnosis_queue = Queue()
        
        self.tester_system_throat = test_throat
        self.tester_system_nasal = test_nasal

        self.test_queue_throat = Queue()
        self.test_queue_nasal = Queue()
        
        self.update = [[self.t, 
                       self.health_declare_queue.size(), 
                       self.counter_queue_1.size(),
                       self.counter_queue_2.size(),
                       self.machine_queue_1.size(),
                       self.machine_queue_2.size(),
                       self.machine_queue_3.size(),
                       self.machine_queue_4.size(),
                       self.diagnosis_queue.size(),
                       self.test_queue_throat.size(),
                       self.test_queue_nasal.size()]]
        
        self.health_declare_t = float('inf')
        self.server_set_t = [float('inf') for i in range(6)]

        self.diagnosis_queue_t = float('inf')                                 
        self.test_queue_throat_t = float('inf')
        self.test_queue_nasal_t = float('inf')    

        self.health_check_index = health_check_index
        self.health_fill_index = health_fill_index
        self.machine_pay_index = machine_pay_index
        self.counter_pay_index = counter_pay_index
        self.diagnosis_index = diagnosis_index
        self.machine_register_index = machine_register_index
        self.counter_register_index = counter_register_index
        self.test_throat_index = test_throat_index
        self.test_nasal_index = test_nasal_index

        
    def simulate(self):
        
        total_patient = len(self.patient_list)
        for i in range(total_patient):
            self.patient_queue.push(self.patient_list[i]) 
         
        while True:

            event_t = [self.patient_queue.top().A_HealthDeclare if self.patient_queue.top() != -1 else float('inf'),
                       self.health_declare_queue.top().D_HealthDeclare if self.health_declare_queue.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Register if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Register if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Register if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Register if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_3.top().D_Register if self.machine_queue_3.top() != -1 and self.machine_queue_3.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_4.top().D_Register if self.machine_queue_4.top() != -1 and self.machine_queue_4.top().D_Pay == float('inf') else float('inf'),
                       self.diagnosis_queue.top().D_Diagnosis if self.diagnosis_queue.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Pay if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Pay if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Pay if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Pay if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_3.top().D_Pay if self.machine_queue_3.top() != -1 and self.machine_queue_3.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_4.top().D_Pay if self.machine_queue_4.top() != -1 and self.machine_queue_4.top().D_Register != float('inf') else float('inf'),                                            
                       self.test_queue_throat.top().D_Test if self.test_queue_throat.top() != -1 else float('inf'),
                       self.test_queue_nasal.top().D_Test if self.test_queue_nasal.top() !=  -1 else float('inf')
                  ]

            case_min_time = min(event_t)
            self.t = case_min_time
            
            if case_min_time == float('inf'):
                break
            self.case = event_t.index(case_min_time)
            

            if self.case <= 0:    
                self.health_declaration(event_t)    
            elif self.case <= 1:    
                self.register(event_t)
            elif self.case <= 7:
                self.diagnosis(event_t)
            elif self.case <= 8:
                self.pay(event_t)
            elif self.case <= 14:
                self.test(event_t)        
            else:
                self.leave()

            self.update.append([self.t, 
                                self.health_declare_queue.size(), 
                                self.counter_queue_1.size(),
                                self.counter_queue_2.size(),
                                self.machine_queue_1.size(),
                                self.machine_queue_2.size(),
                                self.machine_queue_3.size(),
                                self.machine_queue_4.size(),
                                self.diagnosis_queue.size(),
                                self.test_queue_throat.size(),
                                self.test_queue_nasal.size()])            

    def health_declaration(self, event_t):

        patient = self.patient_queue.pop()
        
        declare_time = self.health_check[self.health_check_index]
        self.health_check_index += 1
        if patient.check == 0:
            declare_time += self.health_fill[self.health_fill_index]
            self.health_fill_index += 1
        
        patient.S_HealthDeclare = declare_time
        
        temp_time = patient.A_HealthDeclare + declare_time
        next_health_depature_time = event_t[1] if not self.health_declare_queue.empty() else self.health_declare_t
        

        if next_health_depature_time < patient.A_HealthDeclare or self.health_declare_t == float('inf'):
            self.health_declare_t = temp_time
        else: #next_health_depature_time >= patient.A_HealthDeclare:
            self.health_declare_t += declare_time           
        
        patient.D_HealthDeclare = patient.A_Register = self.health_declare_t
        self.health_declare_queue.push(patient)
        #print(self.health_declare_t,temp_time,patient.A_HealthDeclare,next_health_depature_time)
        
    
    def register(self,event_t):

        patient = self.health_declare_queue.pop()
        
        
        patient_type = patient.patient_type
        if patient.preference == 1: # prefer machine
            line_length = [self.server_queue_set[i].size() for i in range(2,6)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            register_time = self.machine_register[patient_type][self.machine_register_index[patient_type]]
            self.machine_register_index[patient_type] += 1      
        else:                       # prefer counter
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            register_time = self.counter_register[patient.patient_type][0]
            self.counter_register_index[patient_type] += 1 
        
        #register_time = self.server_set[shortest_line_index].generate_register_time(patient.patient_type)
        patient.S_Register = register_time

        temp_time = patient.A_Register + register_time
        next_counter_depature_time = self.server_set_t[shortest_line_index]
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Register:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += register_time     
        
        patient.D_Register = patient.A_Diagnosis = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)
        

    def diagnosis(self, event_t):
        patient = self.server_queue_set[self.case - 2].pop()
        diagnosis_time = self.diagnosis_system[self.diagnosis_index]
        self.diagnosis_index += 1
        patient.S_Diagnosis = diagnosis_time

        temp_time = patient.A_Diagnosis + diagnosis_time
        next_diagnosis_depature_time = self.diagnosis_queue_t 

        if next_diagnosis_depature_time < patient.A_Diagnosis or self.diagnosis_queue_t == float('inf'):
            self.diagnosis_queue_t = temp_time
        else:
            self.diagnosis_queue_t += diagnosis_time

        patient.D_Diagnosis = patient.A_Pay = self.diagnosis_queue_t
        self.diagnosis_queue.push(patient)           


    def pay(self, event_t):
        patient = self.diagnosis_queue.pop()
        
        
        if patient.preference == 1:
            line_length = [self.server_queue_set[i].size() for i in range(2,6)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            pay_time = self.machine_pay[patient.patient_type][self.machine_pay_index[patient.patient_type]]
            self.machine_pay_index[patient.patient_type] += 1      
        else:        
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            pay_time = self.counter_pay[patient.patient_type][self.counter_pay_index[patient.patient_type]]
            self.counter_pay_index[patient.patient_type] += 1 
        
        patient.S_Pay = pay_time

        temp_time = patient.A_Pay + pay_time
        next_counter_depature_time = self.server_set_t[shortest_line_index] 
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Pay:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += pay_time     
        
        patient.D_Pay = patient.A_Test = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)            
        
    def test(self, event_t):
                
        patient = self.server_queue_set[self.case - 9].pop()
        if patient.test_preference == 0:
            test_time = self.tester_system_throat[self.test_throat_index]
            self.test_throat_index += 1
        else:
            test_time = self.tester_system_nasal[self.test_nasal_index]
            self.test_nasal_index += 1
 
        patient.S_Test = test_time

        temp_time = patient.A_Test + test_time
        next_test_depature_time = self.test_queue_throat_t if patient.test_preference == 0 else self.test_queue_nasal_t #event_t[self.case]
        
        if patient.test_preference == 0:
            if self.test_queue_throat_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_throat_t = temp_time
            else:
                self.test_queue_throat_t += test_time    
        
            patient.D_Test = self.test_queue_throat_t
        else:
            if self.test_queue_nasal_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_nasal_t = temp_time
            else:
                self.test_queue_nasal_t += test_time    
        
            patient.D_Test = self.test_queue_nasal_t

        if patient.test_preference == 0:  
            self.test_queue_throat.push(patient)
        else:
            self.test_queue_nasal.push(patient)     


    def leave(self):
        if self.case == 15:
            patient = self.test_queue_throat.pop()
        else:
            patient = self.test_queue_nasal.pop()    
        self.patient_list[patient.index - 1] = patient

class Test_system_alt2:
    
    def __init__(self,
                 patient_arrival,
                 health_check,
                 health_fill,
                 machine_register,
                 machine_pay,
                 counter_register,
                 counter_pay,
                 diagnosis,
                 test_throat,
                 test_nasal,
                 health_check_index,
                 health_fill_index,
                 machine_register_index,
                 machine_pay_index,
                 counter_register_index,
                 counter_pay_index,
                 diagnosis_index,
                 test_throat_index,
                 test_nasal_index,                  
                 T = 4*60,                 
                 ):
        
        self.T = T
        self.t = 0
        self.case = -1

        self.health_check = health_check
        self.health_fill = health_fill

        self.patient_list = patient_arrival
        
        self.patient_queue = Queue()

        self.health_declare_queue = Queue()
        
        self.machine_register = machine_register
        self.counter_register = counter_register
        self.machine_pay = machine_pay
        self.counter_pay = counter_pay

        self.counter_queue_1 = Queue()
        self.counter_queue_2 = Queue()
        self.machine_queue_1 = Queue()
        self.machine_queue_2 = Queue()


        #self.server_set = [self.counter_1 , self.counter_2 , self.machine_1 , self.machine_2]
        self.server_queue_set = [self.counter_queue_1 , self.counter_queue_2 , self.machine_queue_1 , self.machine_queue_2]
        
        self.diagnosis_system = diagnosis
        #self.diagnosis_system_2 = Doctor()
        self.diagnosis_queue_1 = Queue()
        self.diagnosis_queue_2 = Queue()

        #self.diagnosis_set = [self.diagnosis_system_1, self.diagnosis_system_2]
        self.diagnosis_queue_set = [self.diagnosis_queue_1 , self.diagnosis_queue_2]
        
        
        self.tester_system_throat = test_throat
        self.tester_system_nasal = test_nasal

        self.test_queue_throat = Queue()
        self.test_queue_nasal = Queue()
        
        self.update = [[self.t, 
                       self.health_declare_queue.size(), 
                       self.counter_queue_1.size(),
                       self.counter_queue_2.size(),
                       self.machine_queue_1.size(),
                       self.machine_queue_2.size(),
                       self.diagnosis_queue_1.size(),
                       self.diagnosis_queue_2.size(),
                       self.test_queue_throat.size(),
                       self.test_queue_nasal.size()]]
        
        self.health_declare_t = float('inf')
        self.server_set_t = [float('inf') for i in range(4)]

        self.diagnosis_queue_1_t = float('inf')
        self.diagnosis_queue_2_t = float('inf')
        self.diagnosis_t_set = [self.diagnosis_queue_1_t , self.diagnosis_queue_2_t]

        self.test_queue_throat_t = float('inf')
        self.test_queue_nasal_t = float('inf')     

        self.health_check_index = health_check_index
        self.health_fill_index = health_fill_index
        self.machine_pay_index = machine_pay_index
        self.counter_pay_index = counter_pay_index
        self.diagnosis_index = diagnosis_index
        self.machine_register_index = machine_register_index
        self.counter_register_index = counter_register_index
        self.test_throat_index = test_throat_index
        self.test_nasal_index = test_nasal_index

        
    def simulate(self):
        
        total_patient = len(self.patient_list)
        for i in range(total_patient):
            self.patient_queue.push(self.patient_list[i]) 
         
        while True:

            
            event_t = [self.patient_queue.top().A_HealthDeclare if self.patient_queue.top() != -1 else float('inf'),
                       self.health_declare_queue.top().D_HealthDeclare if self.health_declare_queue.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Register if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Register if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Register if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Pay == float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Register if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Pay == float('inf') else float('inf'),
                       self.diagnosis_queue_1.top().D_Diagnosis if self.diagnosis_queue_1.top() != -1 else float('inf'),
                       self.diagnosis_queue_2.top().D_Diagnosis if self.diagnosis_queue_2.top() != -1 else float('inf'),
                       self.counter_queue_1.top().D_Pay if self.counter_queue_1.top() != -1 and self.counter_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.counter_queue_2.top().D_Pay if self.counter_queue_2.top() != -1 and self.counter_queue_2.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_1.top().D_Pay if self.machine_queue_1.top() != -1 and self.machine_queue_1.top().D_Register != float('inf') else float('inf'),
                       self.machine_queue_2.top().D_Pay if self.machine_queue_2.top() != -1 and self.machine_queue_2.top().D_Register != float('inf') else float('inf'),                      
                       self.test_queue_throat.top().D_Test if self.test_queue_throat.top() != -1 else float('inf'),
                       self.test_queue_nasal.top().D_Test if self.test_queue_nasal.top() !=  -1 else float('inf')
                  ]
            

            #print(event_t[5:7])
            case_min_time = min(event_t)
            self.t = case_min_time
            
            if case_min_time == float('inf'):
                break
            self.case = event_t.index(case_min_time)
            
            if self.case <= 0:    
                self.health_declaration(event_t)    
            elif self.case <= 1:    
                self.register(event_t)
            elif self.case <= 5:
                self.diagnosis(event_t)
            elif self.case <= 7:
                self.pay(event_t)
            elif self.case <= 11:
                self.test(event_t)        
            else:
                self.leave()

            self.update.append([self.t, 
                                self.health_declare_queue.size(), 
                                self.counter_queue_1.size(),
                                self.counter_queue_2.size(),
                                self.machine_queue_1.size(),
                                self.machine_queue_2.size(),
                                self.diagnosis_queue_1.size(),
                                self.diagnosis_queue_2.size(),
                                self.test_queue_throat.size(),
                                self.test_queue_nasal.size()])            

    def health_declaration(self, event_t):

        patient = self.patient_queue.pop()
        
        declare_time = self.health_check[self.health_check_index]
        self.health_check_index += 1
        if patient.check == 0:
            declare_time += self.health_fill[self.health_fill_index]
            self.health_fill_index += 1
        
        patient.S_HealthDeclare = declare_time  
        
        temp_time = patient.A_HealthDeclare + declare_time
        next_health_depature_time = self.health_declare_t 
        

        if next_health_depature_time < patient.A_HealthDeclare or self.health_declare_t == float('inf'):
            self.health_declare_t = temp_time
        elif next_health_depature_time > patient.A_HealthDeclare:
            self.health_declare_t += declare_time           
        
        patient.D_HealthDeclare = patient.A_Register = self.health_declare_t
        self.health_declare_queue.push(patient)
        
    
    def register(self,event_t): 

        patient = self.health_declare_queue.pop()
        
        
        if patient.preference == 1:
            line_length = [self.server_queue_set[i].size() for i in range(2,4)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            register_time = self.machine_register[patient.patient_type][self.machine_register_index[patient.patient_type]]
            self.machine_register_index[patient.patient_type] += 1      
        else:        
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            register_time = self.counter_register[patient.patient_type][self.counter_register_index[patient.patient_type]]
            self.counter_register_index[patient.patient_type] += 1 
        
        patient.S_Register = register_time

        temp_time = patient.A_Register + register_time
        next_counter_depature_time = self.server_set_t[shortest_line_index] #event_t[shortest_line_index + 2]
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Register:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += register_time     
        
        patient.D_Register = patient.A_Diagnosis = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)
        

    def diagnosis(self, event_t):
        
        line_length = [self.diagnosis_queue_set[i].size() for i in range(2)]
        shortest_line_index = line_length.index(min(line_length))         
        
        patient = self.server_queue_set[self.case - 2].pop()
        diagnosis_time = self.diagnosis_system[self.diagnosis_index]#elf.diagnosis_set[shortest_line_index].generate_diagnosis_time()
        self.diagnosis_index += 1
        patient.S_Diagnosis = diagnosis_time

        temp_time = patient.A_Diagnosis + diagnosis_time
        next_diagnosis_depature_time = self.diagnosis_t_set[shortest_line_index] #event_t[self.case]

        if next_diagnosis_depature_time < patient.A_Diagnosis or self.diagnosis_t_set[shortest_line_index] == float('inf'):
            self.diagnosis_t_set[shortest_line_index] = temp_time
        else:
            self.diagnosis_t_set[shortest_line_index] += diagnosis_time

        patient.D_Diagnosis = patient.A_Pay = self.diagnosis_t_set[shortest_line_index]
        self.diagnosis_queue_set[shortest_line_index].push(patient)           

    def pay(self, event_t):
        patient = self.diagnosis_queue_set[self.case - 6].pop()       
        
        if patient.preference == 1:
            line_length = [self.server_queue_set[i].size() for i in range(2,4)]
            shortest_line_index = 2 + line_length.index(min(line_length))
            pay_time = self.machine_pay[patient.patient_type][self.machine_pay_index[patient.patient_type]]
            self.machine_pay_index[patient.patient_type] += 1      
        else:        
            line_length = [self.server_queue_set[i].size() for i in range(0,2)]
            shortest_line_index = 0 + line_length.index(min(line_length))
            pay_time = self.counter_pay[patient.patient_type][self.counter_pay_index[patient.patient_type]]
            self.counter_pay_index[patient.patient_type] += 1 
        
        #pay_time = self.server_set[shortest_line_index].generate_pay_time(patient.patient_type)
        patient.S_Pay = pay_time

        temp_time = patient.A_Pay + pay_time
        next_counter_depature_time = self.server_set_t[shortest_line_index] #event_t[shortest_line_index + 8]
        if self.server_set_t[shortest_line_index] == float('inf') or next_counter_depature_time < patient.A_Pay:
            self.server_set_t[shortest_line_index] = temp_time
        else:
            self.server_set_t[shortest_line_index] += pay_time     
        
        patient.D_Pay = patient.A_Test = self.server_set_t[shortest_line_index]
        self.server_queue_set[shortest_line_index].push(patient)            
        
    def test(self, event_t):
                
        patient = self.server_queue_set[self.case - 8].pop()
        if patient.test_preference == 0:
            test_time = self.tester_system_throat[self.test_throat_index]
            self.test_throat_index += 1
        else:
            test_time = self.tester_system_nasal[self.test_nasal_index]
            self.test_nasal_index += 1
 
        patient.S_Test = test_time

        temp_time = patient.A_Test + test_time
        next_test_depature_time = self.test_queue_throat_t if patient.test_preference == 0 else self.test_queue_nasal_t
        
        if patient.test_preference == 0:
            if self.test_queue_throat_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_throat_t = temp_time
            else:
                self.test_queue_throat_t += test_time    
        
            patient.D_Test = self.test_queue_throat_t
        else:
            if self.test_queue_nasal_t == float('inf') or next_test_depature_time < patient.A_Test:
                self.test_queue_nasal_t = temp_time
            else:
                self.test_queue_nasal_t += test_time    
        
            patient.D_Test = self.test_queue_nasal_t

        if patient.test_preference == 0:  
            self.test_queue_throat.push(patient)
        else:
            self.test_queue_nasal.push(patient)     

    def leave(self):
        if self.case == 12:
            patient = self.test_queue_throat.pop()
        else:
            patient = self.test_queue_nasal.pop()    
        self.patient_list[patient.index - 1] = patient

"""# Common Random Number"""

class CRN:
    
    def __init__(self,iterations = 5000): 
        
        np.random.seed(5566)
        self.iterations = iterations
        self.n = iterations * 80
        self.health_check = []
        self.health_fill = []
        self.group_index_set = [0,1,2]
        self.machine_register = {0:[],1:[],2:[]}
        self.machine_pay = {0:[],1:[],2:[]}
        self.counter_register = {0:[],1:[],2:[]}
        self.counter_pay = {0:[],1:[],2:[]}
        self.diagnosis = []
        self.test_throat = []
        self.test_nasal = []
        
        self.patient_arrive = []
        self.patient_system = Patient_arrival()
        self.T = 4 * 60
        self.pre_generate()

    def pre_arrival(self):
        t = 0
        patient_list = []
        while True:
            new_pat = self.patient_system.generate_new_patient()
            arrive_time = self.patient_system.generate_nonhomo_time(t)
            t = arrive_time
            if t > self.T:
                break
            new_pat.A_HealthDeclare = t
            patient_list.append(new_pat)
            patient_list[-1].index = len(patient_list)

        self.patient_arrive.append(patient_list) 
            

    def pre_generate(self):    
        machine = Machine()
        counter = Counter()
        doctor = Doctor()
        health = Health_checker()
        tester_throat = Tester(1/0.67)
        tester_nasal = Tester(1/0.83)
        
        for i in tqdm(range(self.iterations)):
            self.pre_arrival()

        for i in tqdm(range(self.n)):
            self.diagnosis.append(doctor.generate_diagnosis_time())
            self.health_check.append(health.generate_check_time())
            self.health_fill.append(health.generate_fill_time())
            self.test_throat.append(tester_throat.generate_test_time())
            self.test_nasal.append(tester_nasal.generate_test_time())
            for g in self.group_index_set:
                self.machine_register[g].append(machine.generate_register_time(g))
                self.machine_pay[g].append(machine.generate_pay_time(g))
                self.counter_register[g].append(counter.generate_register_time(g))
                self.counter_pay[g].append(counter.generate_pay_time(g))

class Stats_analysis:
    def __init__(self):
        self.process_list = ['HealthDeclare','Register','Diagnosis','Pay','Test']
        
        self.time_in_system = []
        self.time_in_system_child = []
        self.time_in_each_process_child = {'HealthDeclare':[],
                                            'Register':[],
                                            'Diagnosis':[],
                                            'Pay':[],
                                            'Test':[]}
        self.wt_in_each_process_child = {'HealthDeclare':[],
                                            'Register': [],
                                            'Diagnosis': [],
                                            'Pay': [],
                                            'Test': []}
        self.time_in_system_adult = []
        self.time_in_each_process_adult = {'HealthDeclare':[],
                                            'Register':[],
                                            'Diagnosis':[],
                                            'Pay':[],
                                            'Test':[]}
        self.wt_in_each_process_adult = {'HealthDeclare':[],
                                            'Register': [],
                                            'Diagnosis': [],
                                            'Pay': [],
                                            'Test': []}
        self.time_in_system_elder = []
        self.time_in_each_process_elder = {'HealthDeclare':[],
                                            'Register':[],
                                            'Diagnosis':[],
                                            'Pay':[],
                                            'Test':[]}
        self.wt_in_each_process_elder = {'HealthDeclare':[],
                                            'Register': [],
                                            'Diagnosis': [],
                                            'Pay': [],
                                            'Test': []}
        
        self.time_in_each_process = {'HealthDeclare':[],
                                     'Register':[],
                                     'Diagnosis':[],
                                     'Pay':[],
                                     'Test':[]}
        
        self.wt_in_each_process = {'HealthDeclare':[],
                                     'Register':[],
                                     'Diagnosis':[],
                                     'Pay':[],
                                     'Test':[]}                             
        
        
        self.average_queue_length = []
        self.idle_proportion = []
    

    def add_time_in_system(self, patient):
        total_time = patient.D_Test - patient.A_HealthDeclare
        self.time_in_system.append(total_time)
        if patient.patient_type == 0:
          self.time_in_system_child.append(total_time)
        elif patient.patient_type == 1:
          self.time_in_system_adult.append(total_time)
        elif patient.patient_type == 2:
          self.time_in_system_elder.append(total_time)
        
    def add_time_and_wait_time(self, patient):
        patient_attr = inspect.getmembers(patient)
        member_info = [a[1] for a in patient_attr if a[0] == '__dict__'][0]
        
        for process in self.process_list:
            total_time = member_info['D_'+process] - member_info['A_'+process]
            waiting_time = total_time - member_info['S_'+process]
            self.time_in_each_process[process].append(total_time)
            self.wt_in_each_process[process].append(waiting_time)
            
            if patient.patient_type == 0:
                self.time_in_each_process_child[process].append(total_time)
                self.wt_in_each_process_child[process].append(waiting_time) 
            elif patient.patient_type == 1:
                self.time_in_each_process_adult[process].append(total_time)
                self.wt_in_each_process_adult[process].append(waiting_time) 
            else:
                self.time_in_each_process_elder[process].append(total_time)
                self.wt_in_each_process_elder[process].append(waiting_time)      
            
    def average_line(self, line_update):
        line_length = [0. for i in range(len(line_update[0]) - 1)]
        total_queue_number = len(line_update[0]) - 1
        for i in range(len(line_update)-1):
            delta_t = line_update[i+1][0] - line_update[i][0]
            for j in range(1,total_queue_number):
                line_length[j-1] += delta_t * line_update[i+1][j]

        line_length = np.array(line_length)
        line_length /= line_update[-1][0]
        self.average_queue_length.append(line_length)

"""# Base model simulation 

"""

N = 16182
np.random.seed(5566) 
stats_result_base = Stats_analysis()
stats_result_alt1 = Stats_analysis()
stats_result_alt2 = Stats_analysis()

print('Start of base model!')
try:
    del d
except:
    None
health_check_index = 0
health_fill_index = 0
machine_register_index = {0:0,1:0,2:0}
machine_pay_index = {0:1,1:0,2:0}
counter_register_index = {0:1,1:0,2:0}
counter_pay_index = {0:1,1:0,2:0}
diagnosis_index = 0
test_throat_index = 0
test_nasal_index = 0

d = CRN(iterations=N)
for i in tqdm(range(N)):
    test_sys = Test_system_base(d.patient_arrive[i],
                                d.health_check,
                                d.health_fill,
                                d.machine_register,
                                d.machine_pay,
                                d.counter_register,
                                d.counter_pay, 
                                d.diagnosis,
                                d.test_throat,
                                d.test_nasal,
                                health_check_index,
                                health_fill_index,
                                machine_register_index,
                                machine_pay_index,
                                counter_register_index,
                                counter_pay_index,
                                diagnosis_index,
                                test_throat_index,
                                test_nasal_index)
    test_sys.simulate()

    time_series = []
    for p in test_sys.patient_list:
        stats_result_base.add_time_in_system(p)
        stats_result_base.add_time_and_wait_time(p)
        time_series.append(test_sys.update)
    stats_result_base.average_line(test_sys.update)
   
    health_check_index = test_sys.health_check_index
    health_fill_index = test_sys.health_fill_index
    machine_register_index = test_sys.machine_register_index
    machine_pay_index = test_sys.machine_pay_index
    counter_register_index = test_sys.counter_register_index
    counter_pay_index = test_sys.counter_pay_index
    diagnosis_index = test_sys.diagnosis_index
    test_throat_index = test_sys.test_throat_index
    test_nasal_index = test_sys.test_nasal_index       

del d
health_check_index = 0
health_fill_index = 0
machine_register_index = {0:0,1:0,2:0}
machine_pay_index = {0:1,1:0,2:0}
counter_register_index = {0:1,1:0,2:0}
counter_pay_index = {0:1,1:0,2:0}
diagnosis_index = 0
test_throat_index = 0
test_nasal_index = 0
print("Start of alternative 1")
d = CRN(iterations=N)
for i in tqdm(range(N)):
    test_sys = Test_system_alt1(d.patient_arrive[i],
                                d.health_check,
                                d.health_fill,
                                d.machine_register,
                                d.machine_pay,
                                d.counter_register,
                                d.counter_pay,
                                d.diagnosis,
                                d.test_throat,
                                d.test_nasal,
                                health_check_index,
                                health_fill_index,
                                machine_register_index,
                                machine_pay_index,
                                counter_register_index,
                                counter_pay_index,
                                diagnosis_index,
                                test_throat_index,
                                test_nasal_index)
    test_sys.simulate()

    time_series = []
    for p in test_sys.patient_list:
        stats_result_alt1.add_time_in_system(p)
        stats_result_alt1.add_time_and_wait_time(p)
        time_series.append(test_sys.update)
    stats_result_alt1.average_line(test_sys.update) 

    health_check_index = test_sys.health_check_index
    health_fill_index = test_sys.health_fill_index
    machine_register_index = test_sys.machine_register_index
    machine_pay_index = test_sys.machine_pay_index
    counter_register_index = test_sys.counter_register_index
    counter_pay_index = test_sys.counter_pay_index
    diagnosis_index = test_sys.diagnosis_index
    test_throat_index = test_sys.test_throat_index
    test_nasal_index = test_sys.test_nasal_index    

del d
health_check_index = 0
health_fill_index = 0
machine_register_index = {0:0,1:0,2:0}
machine_pay_index = {0:1,1:0,2:0}
counter_register_index = {0:1,1:0,2:0}
counter_pay_index = {0:1,1:0,2:0}
diagnosis_index = 0
test_throat_index = 0
test_nasal_index = 0
print("Start of alternative 2")
d = CRN(iterations=N)
for i in tqdm(range(N)):
    test_sys = Test_system_alt2(d.patient_arrive[i],
                                d.health_check,
                                d.health_fill,
                                d.machine_register,
                                d.machine_pay,
                                d.counter_register,
                                d.counter_pay,
                                d.diagnosis,
                                d.test_throat,
                                d.test_nasal,
                                health_check_index,
                                health_fill_index,
                                machine_register_index,
                                machine_pay_index,
                                counter_register_index,
                                counter_pay_index,
                                diagnosis_index,
                                test_throat_index,
                                test_nasal_index)
    test_sys.simulate()

    time_series = []
    for p in test_sys.patient_list:
        stats_result_alt2.add_time_in_system(p)
        stats_result_alt2.add_time_and_wait_time(p)
        time_series.append(test_sys.update)
    stats_result_base.average_line(test_sys.update) 

    health_check_index = test_sys.health_check_index
    health_fill_index = test_sys.health_fill_index
    machine_register_index = test_sys.machine_register_index
    machine_pay_index = test_sys.machine_pay_index
    counter_register_index = test_sys.counter_register_index
    counter_pay_index = test_sys.counter_pay_index
    diagnosis_index = test_sys.diagnosis_index
    test_throat_index = test_sys.test_throat_index
    test_nasal_index = test_sys.test_nasal_index









